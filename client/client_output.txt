File Tree:

client/
    .gitignore
    client_output.txt
    eslint.config.js
    grok.py
    index.html
    package-lock.json
    package.json
    postcss.config.js
    README.md
    tailwind.config.js
    vite.config.js
public/
    vite.svg
src/
    App.css
    App.jsx
    index.css
    main.jsx
    assets/
        react.svg
    components/
        ReviewsDashboard.jsx

Files Content:

---
File: .gitignore
---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

---
File: eslint.config.js
---
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

---
File: grok.py
---
import os
import argparse
import tiktoken


def generate_file_tree(root_dir):
    tree = ""
    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Exclude specified directories

        dirnames[:] = [
            d
            for d in dirnames
            if d
            not in [
                "node_modules",
                ".next",
                ".git",
                ".venv",
                ".vscode",
                "__pycache__",
                "blockchain_data",
            ]
        ]
        # Calculate the relative path from root_dir to dirpath
        relative_dir = os.path.relpath(dirpath, root_dir)
        # Count the number of separators in the relative path to determine the level
        level = 0 if relative_dir == "." else relative_dir.count(os.sep) + 1
        indent = "    " * (level - 1)
        dir_name = os.path.basename(dirpath)
        tree += f"{indent}{dir_name}/\n"
        for f in filenames:
            tree += f"{indent}    {f}\n"
    return tree


def get_all_files(root_dir):
    file_paths = []

    excluded_dirs = {
        "node_modules", ".next", ".git", ".venv", ".vscode", "__pycache__",
        "migrations", "logs", "backups", "public", "tests", "blockchain_data"
    }

    excluded_extensions = {
        ".html", ".svg", ".log", ".md", ".json", ".db", ".sql", ".png", ".jpg",
        ".jpeg", ".css", ".ico", ".webp", ".woff", ".woff2", ".ttf", ".eot"
    }

    excluded_filenames = {
        "package.json", "package-lock.json", "README.txt", "README.md",
        "server_output.txt", "client_output.txt", ".eslintrc.json", ".prettierrc",
        "tsconfig.json", ".python-version", "postcss.config.mjs"
    }

    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Exclude folders
        dirnames[:] = [d for d in dirnames if d not in excluded_dirs]

        for f in filenames:
            if f in excluded_filenames:
                continue
            if os.path.splitext(f)[1].lower() in excluded_extensions:
                continue
            full_path = os.path.join(dirpath, f)
            file_paths.append(full_path)

    return file_paths


def read_files(file_paths, root_dir):
    import tiktoken

    content = ""
    MAX_FILE_SIZE = 10 * 1024 * 1024  # 10 MB limit
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")

    for i, file_path in enumerate(file_paths):
        relative_path = os.path.relpath(file_path, root_dir)
        print(f"Reading file {i+1}/{len(file_paths)}: {relative_path}")
        content += f"\n---\nFile: {relative_path}\n---\n"

        try:
            if os.path.getsize(file_path) > MAX_FILE_SIZE:
                content += "<File skipped: Too large>\n"
                print(f"  ⛔ Skipped (too large)")
                continue

            with open(file_path, "r", encoding="utf-8") as file:
                file_content = file.read()

            tokens = encoding.encode(file_content, disallowed_special=())
            print(f"  ✅ {len(tokens)} tokens")
            content += file_content

        except UnicodeDecodeError:
            content += "<File skipped: Invalid UTF-8 encoding>\n"
            print("  ⛔ Skipped (invalid UTF-8)")

        except Exception as e:
            content += f"<Could not read file: {e}>\n"
            print(f"  ⛔ Could not read: {e}")

    return content


def count_tokens(text):
    encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
    # Disable special token check
    tokens = encoding.encode(text, disallowed_special=())
    return len(tokens)


def main():
    parser = argparse.ArgumentParser(
        description="Prepare folder contents for LLM prompt."
    )
    parser.add_argument(
        "directory", help="The root directory of your code files.")
    parser.add_argument(
        "-o",
        "--output",
        help="The output TXT file to save the concatenated content. Defaults to 'backend.txt' or 'frontend.txt'.",
        default=None,
    )
    args = parser.parse_args()

    root_dir = os.path.abspath(args.directory)

    # Set output filename based on the directory name (backend or frontend)
    if args.output is None:
        # Default to using directory name as output file
        directory_name = os.path.basename(root_dir)
        output_filename = f"{directory_name}.txt"
    else:
        output_filename = args.output

    # Generate file tree
    print("Generating file tree...")
    file_tree = generate_file_tree(root_dir)

    # Get all file paths
    print("Collecting file paths...")
    file_paths = get_all_files(root_dir)

    # Read all files and get their content
    print("Reading files...")
    files_content = read_files(file_paths, root_dir)

    # Combine file tree and files content
    total_output = f"File Tree:\n\n{file_tree}\nFiles Content:\n{files_content}"

    # Count tokens
    print("Counting tokens...")
    token_count = count_tokens(total_output)

    # Save the concatenated content to a TXT file
    print(f"Saving to {output_filename}...")
    with open(output_filename, "w", encoding="utf-8") as output_file:
        output_file.write(total_output)

    # Print the total token count
    print(f"Total Tokens: {token_count}")
    print(f"All content has been saved to {output_filename}")


if __name__ == "__main__":
    main()

---
File: postcss.config.js
---
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

---
File: tailwind.config.js
---
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html", 
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'sans-serif'],
      },
    },
  },
  plugins: [],
}
---
File: vite.config.js
---
// client/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': 'http://localhost:4000'
    }
  }
});

---
File: src\App.jsx
---
// my-hotai-project/client/src/App.jsx
import ReviewsDashboard from './components/ReviewsDashboard';

function App() {
  return (
    <div className="font-sans">
      <ReviewsDashboard />
    </div>
  );
}
export default App;

---
File: src\main.jsx
---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css' 

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

---
File: src\components\ReviewsDashboard.jsx
---
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import {
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip,
  ResponsiveContainer, PieChart, Pie, Cell, Legend, LineChart, Line
} from 'recharts'; // ✅ הוספתי LineChart ו־Line

const COLORS = ['#00C49F', '#FF8042'];

function ResponseQualityChart() {
  const [data, setData] = useState([]);

  useEffect(() => {
    axios.get('/api/reviews/response-quality-over-time')
      .then(res => {
        if (Array.isArray(res.data)) {
          setData(res.data);
        } else {
          console.error('Unexpected response format:', res.data);
          setData([]);
        }
      })
      .catch(err => console.error('Error fetching response quality:', err));
  }, []);

  return (
    <LineChart width={600} height={300} data={data}>
      <CartesianGrid stroke="#ccc" />
      <XAxis dataKey="review_date" />
      <YAxis />
      <Tooltip />
      <Line type="monotone" dataKey="avg_quality" stroke="#8884d8" />
    </LineChart>
  );
}

function ReviewsDashboard() {
  const [reviews, setReviews] = useState([]);
  const [filters, setFilters] = useState({ hotel_id: '', chain_id: '', from: '', to: '' });

  useEffect(() => {
    fetchReviews();
  }, [filters]);

  const fetchReviews = async () => {
    try {
      const params = {};
      if (filters.hotel_id) params.hotel_id = filters.hotel_id;
      if (filters.chain_id) params.chain_id = filters.chain_id;
      if (filters.from) params.from = filters.from;
      if (filters.to) params.to = filters.to;

      const res = await axios.get('http://localhost:4000/api/reviews', { params });
      setReviews(res.data);
    } catch (error) {
      console.error('Error fetching reviews:', error);
    }
  };

  const ratingCounts = Array.from({ length: 10 }, (_, i) => {
    const rating = i + 1;
    const count = reviews.filter(r => r.rating === rating).length;
    return { rating: rating.toString(), count };
  });

  const answered = reviews.filter(r => r.hotel_response).length;
  const unanswered = reviews.length - answered;
  const responseData = [
    { name: 'Answered', value: answered },
    { name: 'Unanswered', value: unanswered }
  ];

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({ ...prev, [name]: value }));
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-8 text-gray-800">📊 Reviews Dashboard</h1>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <input type="number" name="hotel_id" placeholder="Hotel ID" onChange={handleFilterChange} className="p-2 border rounded" />
        <input type="number" name="chain_id" placeholder="Chain ID" onChange={handleFilterChange} className="p-2 border rounded" />
        <input type="date" name="from" onChange={handleFilterChange} className="p-2 border rounded" />
        <input type="date" name="to" onChange={handleFilterChange} className="p-2 border rounded" />
      </div>

      <section className="grid grid-cols-1 md:grid-cols-2 gap-10 mb-12">
        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Rating Distribution</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={ratingCounts}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="rating" />
              <YAxis />
              <Tooltip />
              <Bar dataKey="count" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">AI Response Rate</h2>
          <ResponsiveContainer width="100%" height={300}>
            <PieChart>
              <Pie
                data={responseData}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                outerRadius={80}
                label
              >
                {responseData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index]} />
                ))}
              </Pie>
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </section>

      {/* ✅ גרף חדש: איכות תגובות לאורך זמן */}
      <section className="bg-white p-6 rounded-lg shadow mb-12">
        <h2 className="text-xl font-semibold mb-4 text-gray-700">Response Quality Over Time</h2>
        <ResponsiveContainer width="100%" height={300}>
          <ResponseQualityChart />
        </ResponsiveContainer>
      </section>

      <h2 className="text-2xl font-semibold mb-4 text-gray-700">All Reviews</h2>
      <ul className="space-y-6">
        {reviews.map((rev) => (
          <li key={rev.review_id} className="bg-white p-4 shadow rounded-lg border">
            <p className="text-gray-800 font-semibold">👤 {rev.review_text}</p>
            <p className="text-gray-600">⭐ Rating: {rev.rating}</p>
            <p className="text-gray-500">🏨 Hotel: {rev.hotel_name} | 🏢 Chain: {rev.hotel_chain}</p>
            <p className="mt-2"><strong>Hotel Response:</strong> {rev.hotel_response || 'No response'}</p>
            <p><strong>Response Quality Score:</strong> {rev.calculate_score !== null ? rev.calculate_score : 'N/A'}</p>
            <p className="text-sm text-gray-400">🕒 {new Date(rev.created_at).toLocaleDateString()}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default ReviewsDashboard;
